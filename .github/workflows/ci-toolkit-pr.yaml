name: CI - Build Toolkit

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-toolkit:
    name: Build Toolkit on ${{ matrix.platform }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository_owner }}/docker-toolkit
            ghcr.io/${{ github.repository }}/docker-toolkit
            ghcr.io/${{ github.repository_owner }}/docker-toolkit
          tags: |
            type=ref,event=pr

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker/toolkit/
          push: ${{ vars.DEBUG == 'true' }}
          load: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/docker-toolkit:pr-cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/docker-toolkit:pr-cache,mode=max
      
      - name: Test code-server availability
        run: |
          docker run -d -p 8443:8443 ghcr.io/${{ github.repository_owner }}/docker-toolkit:pr-${{ github.event.pull_request.number }}
          URL="http://localhost:8443"

          for i in {1..3}; do
              status_code=$(curl -o /dev/null -s -w "%{http_code}\n" $URL)
              
              if [[ $status_code -eq 200 ]]; then
                  echo "URL returned 200 OK on attempt $i"
                  break
              else
                  echo "Attempt $i: URL did not return 200 OK (Status: $status_code)"
                  if [[ $i -lt 3 ]]; then
                      echo "Retrying..."
                  else
                      echo "Max retries reached. Exiting."
                      exit 1
                  fi
              fi
              
              sleep 10
          done